{"ast":null,"code":"import { filter, map, of, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(http) {\n    this.http = http;\n    this.productsUrl = 'assets/product-fixtures.json';\n    this.products = [];\n  }\n  getProducts() {\n    return this.http.get(this.productsUrl);\n  }\n  getProduct(sku) {\n    return this.http.get(`${this.productsUrl}?sku=${sku}`).pipe(map(products => products.find(product => product.sku === sku)), filter(product => !!product), map(product => product));\n  }\n  // getProduct(sku: string): Observable<Product> {\n  //   return this.http.get<Product[]>(`${this.productsUrl}?sku=${sku}`).pipe(\n  //     map(products => products[0])\n  //   );\n  // }\n  // getProduct(sku: string): Observable<Product> {\n  //   return this.getProducts().pipe(\n  //     map(products => products.find(product => product.sku === sku))\n  //   );\n  // }\n  // updateProduct(product: Product): Observable<void> {\n  //   return this.http.put<void>(`${this.productsUrl}/${product.id}`, product);\n  // }\n  // updateProduct(product: Product): Observable<void> {\n  //   const url = `${this.productsUrl}/${product.id}`;\n  //   return this.http.put<void>(url, product);\n  // }\n  // deleteProduct(sku: string): Observable<void> {\n  //   return this.http.delete<void>(`${this.productsUrl}/${sku}`);\n  // }\n  deleteProduct(sku) {\n    this.products = this.products.filter(product => product.sku !== sku);\n    return of(undefined);\n  }\n  // updateProduct(product: Product): Observable<any> {\n  //   console.log(product)\n  //   const index = this.products.findIndex((p) => p.sku === product.sku);\n  //   if (index !== -1) {\n  //     this.products[index] = product;\n  //     return this.http.put<void>(`${this.productsUrl}/${product.sku}`, product);\n  //   }\n  //   return of({});\n  // }\n  updateProduct(product) {\n    const productIndex = this.products.findIndex(p => p.sku === product.sku);\n    if (productIndex === -1) {\n      return throwError(`Product with SKU ${product.sku} not found`);\n    }\n    this.products[productIndex] = product;\n    return this.http.put(`${this.productsUrl}/${product.sku}`, product);\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,MAAM,EAAEC,GAAG,EAAcC,EAAE,EAAEC,UAAU,QAAQ,MAAM;;;AAQ9D,OAAM,MAAOC,cAAc;EAOzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IALhB,gBAAW,GAAG,8BAA8B;IAC5C,aAAQ,GAAc,EAAE;EAIO;EAEvCC,WAAW;IACT,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAY,IAAI,CAACC,WAAW,CAAC;EACnD;EAEAC,UAAU,CAACC,GAAW;IACpB,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAY,GAAG,IAAI,CAACC,WAAW,QAAQE,GAAG,EAAE,CAAC,CAACC,IAAI,CACpEX,GAAG,CAACY,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACJ,GAAG,KAAKA,GAAG,CAAC,CAAC,EAC9DX,MAAM,CAACe,OAAO,IAAI,CAAC,CAACA,OAAO,CAAC,EAC5Bd,GAAG,CAACc,OAAO,IAAIA,OAAkB,CAAC,CACnC;EACH;EAGA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EAEA;EACA;EACA;EAEAC,aAAa,CAACL,GAAW;IACvB,IAAI,CAACE,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACb,MAAM,CAACe,OAAO,IAAIA,OAAO,CAACJ,GAAG,KAAKA,GAAG,CAAC;IACpE,OAAOT,EAAE,CAACe,SAAS,CAAC;EACtB;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAC,aAAa,CAACH,OAAgB;IAC5B,MAAMI,YAAY,GAAG,IAAI,CAACN,QAAQ,CAACO,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACV,GAAG,KAAKI,OAAO,CAACJ,GAAG,CAAC;IACxE,IAAIQ,YAAY,KAAK,CAAC,CAAC,EAAE;MACvB,OAAOhB,UAAU,CAAC,oBAAoBY,OAAO,CAACJ,GAAG,YAAY,CAAC;;IAEhE,IAAI,CAACE,QAAQ,CAACM,YAAY,CAAC,GAAGJ,OAAO;IACrC,OAAO,IAAI,CAACT,IAAI,CAACgB,GAAG,CAAO,GAAG,IAAI,CAACb,WAAW,IAAIM,OAAO,CAACJ,GAAG,EAAE,EAAEI,OAAO,CAAC;EAC3E;;AAtEWX,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAmB,SAAdnB,cAAc;EAAAoB,YAFb;AAAM","names":["filter","map","of","throwError","ProductService","constructor","http","getProducts","get","productsUrl","getProduct","sku","pipe","products","find","product","deleteProduct","undefined","updateProduct","productIndex","findIndex","p","put","factory","providedIn"],"sourceRoot":"","sources":["/Users/samarthgoudar/Documents/Development/Projects/Git/Paige-Ecommerce-Widget/frontend/paige-ecommerce-widget/src/app/products/product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { filter, map, Observable, of, throwError } from 'rxjs';\n\nimport { Product } from './product.model';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n\n  private productsUrl = 'assets/product-fixtures.json';\n  private products: Product[] = [];\n\n\n\n  constructor(private http: HttpClient) {}\n\n  getProducts(): Observable<Product[]> {\n    return this.http.get<Product[]>(this.productsUrl);\n  }\n\n  getProduct(sku: string): Observable<Product> {\n    return this.http.get<Product[]>(`${this.productsUrl}?sku=${sku}`).pipe(\n      map(products => products.find(product => product.sku === sku)),\n      filter(product => !!product),\n      map(product => product as Product)\n    );\n  }\n  \n\n  // getProduct(sku: string): Observable<Product> {\n  //   return this.http.get<Product[]>(`${this.productsUrl}?sku=${sku}`).pipe(\n  //     map(products => products[0])\n  //   );\n  // }\n\n  // getProduct(sku: string): Observable<Product> {\n  //   return this.getProducts().pipe(\n  //     map(products => products.find(product => product.sku === sku))\n  //   );\n    \n  // }\n\n  // updateProduct(product: Product): Observable<void> {\n  //   return this.http.put<void>(`${this.productsUrl}/${product.id}`, product);\n  // }\n\n  // updateProduct(product: Product): Observable<void> {\n  //   const url = `${this.productsUrl}/${product.id}`;\n  //   return this.http.put<void>(url, product);\n  // }\n  \n  // deleteProduct(sku: string): Observable<void> {\n  //   return this.http.delete<void>(`${this.productsUrl}/${sku}`);\n  // }\n\n  deleteProduct(sku: string): Observable<void> {\n    this.products = this.products.filter(product => product.sku !== sku);\n    return of(undefined);\n  }\n\n  // updateProduct(product: Product): Observable<any> {\n  //   console.log(product)\n  //   const index = this.products.findIndex((p) => p.sku === product.sku);\n  //   if (index !== -1) {\n  //     this.products[index] = product;\n  //     return this.http.put<void>(`${this.productsUrl}/${product.sku}`, product);\n  //   }\n  //   return of({});\n  // }\n\n  updateProduct(product: Product): Observable<void> {\n    const productIndex = this.products.findIndex(p => p.sku === product.sku);\n    if (productIndex === -1) {\n      return throwError(`Product with SKU ${product.sku} not found`);\n    }\n    this.products[productIndex] = product;\n    return this.http.put<void>(`${this.productsUrl}/${product.sku}`, product);\n  }\n  \n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}