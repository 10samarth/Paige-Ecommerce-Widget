{"ast":null,"code":"import { map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(http) {\n    this.http = http;\n    this.productsUrl = 'assets/product-fixtures.json';\n    this.products = [];\n  }\n  getProducts() {\n    return this.http.get(this.productsUrl);\n  }\n  getProduct(sku) {\n    return this.http.get(`${this.productsUrl}?sku=${sku}`).pipe(map(products => products[0]));\n  }\n  // getProduct(sku: string): Observable<Product> {\n  //   return this.getProducts().pipe(\n  //     map(products => products.find(product => product.sku === sku))\n  //   );\n  // }\n  // updateProduct(product: Product): Observable<void> {\n  //   return this.http.put<void>(`${this.productsUrl}/${product.id}`, product);\n  // }\n  updateProduct(product) {\n    const url = `${this.productsUrl}/${product.id}`;\n    return this.http.put(url, product);\n  }\n  // deleteProduct(sku: string): Observable<void> {\n  //   return this.http.delete<void>(`${this.productsUrl}/${sku}`);\n  // }\n  deleteProduct(sku) {\n    this.products = this.products.filter(product => product.sku !== sku);\n    return of(undefined);\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,EAAcC,EAAE,QAAQ,MAAM;;;AAQ1C,OAAM,MAAOC,cAAc;EAOzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IALhB,gBAAW,GAAG,8BAA8B;IAC5C,aAAQ,GAAc,EAAE;EAIO;EAEvCC,WAAW;IACT,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAY,IAAI,CAACC,WAAW,CAAC;EACnD;EAEAC,UAAU,CAACC,GAAW;IACpB,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAY,GAAG,IAAI,CAACC,WAAW,QAAQE,GAAG,EAAE,CAAC,CAACC,IAAI,CACpEV,GAAG,CAACW,QAAQ,IAAIA,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC7B;EACH;EAEA;EACA;EACA;EACA;EAEA;EAEA;EACA;EACA;EAEAC,aAAa,CAACC,OAAgB;IAC5B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACP,WAAW,IAAIM,OAAO,CAACE,EAAE,EAAE;IAC/C,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAOF,GAAG,EAAED,OAAO,CAAC;EAC1C;EAEA;EACA;EACA;EAEAI,aAAa,CAACR,GAAW;IACvB,IAAI,CAACE,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACO,MAAM,CAACL,OAAO,IAAIA,OAAO,CAACJ,GAAG,KAAKA,GAAG,CAAC;IACpE,OAAOR,EAAE,CAACkB,SAAS,CAAC;EACtB;;AA1CWjB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAkB,SAAdlB,cAAc;EAAAmB,YAFb;AAAM","names":["map","of","ProductService","constructor","http","getProducts","get","productsUrl","getProduct","sku","pipe","products","updateProduct","product","url","id","put","deleteProduct","filter","undefined","factory","providedIn"],"sourceRoot":"","sources":["/Users/samarthgoudar/Documents/Development/Projects/Git/Paige-Ecommerce-Widget/frontend/paige-ecommerce-widget/src/app/products/product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map, Observable, of } from 'rxjs';\n\nimport { Product } from './product.model';\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n\n  private productsUrl = 'assets/product-fixtures.json';\n  private products: Product[] = [];\n\n\n\n  constructor(private http: HttpClient) {}\n\n  getProducts(): Observable<Product[]> {\n    return this.http.get<Product[]>(this.productsUrl);\n  }\n\n  getProduct(sku: string): Observable<Product> {\n    return this.http.get<Product[]>(`${this.productsUrl}?sku=${sku}`).pipe(\n      map(products => products[0])\n    );\n  }\n\n  // getProduct(sku: string): Observable<Product> {\n  //   return this.getProducts().pipe(\n  //     map(products => products.find(product => product.sku === sku))\n  //   );\n    \n  // }\n\n  // updateProduct(product: Product): Observable<void> {\n  //   return this.http.put<void>(`${this.productsUrl}/${product.id}`, product);\n  // }\n\n  updateProduct(product: Product): Observable<void> {\n    const url = `${this.productsUrl}/${product.id}`;\n    return this.http.put<void>(url, product);\n  }\n  \n  // deleteProduct(sku: string): Observable<void> {\n  //   return this.http.delete<void>(`${this.productsUrl}/${sku}`);\n  // }\n\n  deleteProduct(sku: string): Observable<void> {\n    this.products = this.products.filter(product => product.sku !== sku);\n    return of(undefined);\n  }\n\n  // updateProduct(product: Product): Observable<any> {\n  //   const index = this.products.findIndex(p => p.sku === product.sku);\n  //   this.products[index] = product;\n  //   return of({});\n  // }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}